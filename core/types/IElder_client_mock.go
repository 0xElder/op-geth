// Code generated by MockGen. DO NOT EDIT.
// Source: core/types/IElder_client.go

// Package types is a generated GoMock package.
package types

import (
	big "math/big"
	reflect "reflect"

	utils "github.com/0xElder/elder/utils"
	types "github.com/0xElder/elder/x/registration/types"
	types0 "github.com/0xElder/elder/x/router/types"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockIElderClient is a mock of IElderClient interface.
type MockIElderClient struct {
	ctrl     *gomock.Controller
	recorder *MockIElderClientMockRecorder
}

// MockIElderClientMockRecorder is the mock recorder for MockIElderClient.
type MockIElderClientMockRecorder struct {
	mock *MockIElderClient
}

// NewMockIElderClient creates a new mock instance.
func NewMockIElderClient(ctrl *gomock.Controller) *MockIElderClient {
	mock := &MockIElderClient{ctrl: ctrl}
	mock.recorder = &MockIElderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIElderClient) EXPECT() *MockIElderClientMockRecorder {
	return m.recorder
}

// CloseElderClient mocks base method.
func (m *MockIElderClient) CloseElderClient() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseElderClient")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseElderClient indicates an expected call of CloseElderClient.
func (mr *MockIElderClientMockRecorder) CloseElderClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseElderClient", reflect.TypeOf((*MockIElderClient)(nil).CloseElderClient))
}

// Conn mocks base method.
func (m *MockIElderClient) Conn() *grpc.ClientConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(*grpc.ClientConn)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *MockIElderClientMockRecorder) Conn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockIElderClient)(nil).Conn))
}

// EnableRollApp mocks base method.
func (m *MockIElderClient) EnableRollApp(rollId, rollStartBlock uint64, executorPk *utils.Secp256k1PrivateKey, elderEnableRollAppCh chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableRollApp", rollId, rollStartBlock, executorPk, elderEnableRollAppCh)
}

// EnableRollApp indicates an expected call of EnableRollApp.
func (mr *MockIElderClientMockRecorder) EnableRollApp(rollId, rollStartBlock, executorPk, elderEnableRollAppCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRollApp", reflect.TypeOf((*MockIElderClient)(nil).EnableRollApp), rollId, rollStartBlock, executorPk, elderEnableRollAppCh)
}

// QueryElderAccountBalance mocks base method.
func (m *MockIElderClient) QueryElderAccountBalance(executorPk *utils.Secp256k1PrivateKey) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryElderAccountBalance", executorPk)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryElderAccountBalance indicates an expected call of QueryElderAccountBalance.
func (mr *MockIElderClientMockRecorder) QueryElderAccountBalance(executorPk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryElderAccountBalance", reflect.TypeOf((*MockIElderClient)(nil).QueryElderAccountBalance), executorPk)
}

// QueryElderChainID mocks base method.
func (m *MockIElderClient) QueryElderChainID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryElderChainID")
	ret0, _ := ret[0].(string)
	return ret0
}

// QueryElderChainID indicates an expected call of QueryElderChainID.
func (mr *MockIElderClientMockRecorder) QueryElderChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryElderChainID", reflect.TypeOf((*MockIElderClient)(nil).QueryElderChainID))
}

// QueryElderForSeqencedBlock mocks base method.
func (m *MockIElderClient) QueryElderForSeqencedBlock(rollId, rollAppBlockNumber uint64) (*types0.QueryTxsByBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryElderForSeqencedBlock", rollId, rollAppBlockNumber)
	ret0, _ := ret[0].(*types0.QueryTxsByBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryElderForSeqencedBlock indicates an expected call of QueryElderForSeqencedBlock.
func (mr *MockIElderClientMockRecorder) QueryElderForSeqencedBlock(rollId, rollAppBlockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryElderForSeqencedBlock", reflect.TypeOf((*MockIElderClient)(nil).QueryElderForSeqencedBlock), rollId, rollAppBlockNumber)
}

// QueryElderRollApp mocks base method.
func (m *MockIElderClient) QueryElderRollApp(rollId uint64) (*types.Roll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryElderRollApp", rollId)
	ret0, _ := ret[0].(*types.Roll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryElderRollApp indicates an expected call of QueryElderRollApp.
func (mr *MockIElderClientMockRecorder) QueryElderRollApp(rollId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryElderRollApp", reflect.TypeOf((*MockIElderClient)(nil).QueryElderRollApp), rollId)
}

// QueryFromElder mocks base method.
func (m *MockIElderClient) QueryFromElder(rollAppEnabled bool, currBlock, rollId uint64) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFromElder", rollAppEnabled, currBlock, rollId)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFromElder indicates an expected call of QueryFromElder.
func (mr *MockIElderClientMockRecorder) QueryFromElder(rollAppEnabled, currBlock, rollId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFromElder", reflect.TypeOf((*MockIElderClient)(nil).QueryFromElder), rollAppEnabled, currBlock, rollId)
}
